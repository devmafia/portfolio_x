{"ast":null,"code":"import React,{createContext,useContext,useState}from'react';// Інтерфейс для теми\nimport{jsx as _jsx}from\"react/jsx-runtime\";// Створення контексту\nexport const ThemeContext=/*#__PURE__*/createContext(undefined);// Провайдер контексту\nexport const ThemeProvider=_ref=>{let{children}=_ref;const[theme,setTheme]=useState('light');const toggleTheme=()=>{setTheme(prevTheme=>prevTheme==='light'?'dark':'light');};return/*#__PURE__*/_jsx(ThemeContext.Provider,{value:{theme,toggleTheme},children:/*#__PURE__*/_jsx(\"div\",{className:theme,children:children})});};// Хук для використання контексту\nexport const useTheme=()=>{const context=useContext(ThemeContext);if(!context){throw new Error('useTheme must be used within a ThemeProvider');}return context;};","map":{"version":3,"names":["React","createContext","useContext","useState","jsx","_jsx","ThemeContext","undefined","ThemeProvider","_ref","children","theme","setTheme","toggleTheme","prevTheme","Provider","value","className","useTheme","context","Error"],"sources":["C:/Users/User/lenovo/htdocs/Flask/booklist/frontend/src/context/ThemeContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, ReactNode } from 'react';\r\n\r\n// Інтерфейс для теми\r\ninterface ThemeContextType {\r\n  theme: string;\r\n  toggleTheme: () => void;\r\n}\r\n\r\n// Створення контексту\r\nexport const ThemeContext = createContext<ThemeContextType | undefined>(undefined);\r\n\r\n// Провайдер контексту\r\nexport const ThemeProvider: React.FC<{ children: ReactNode }> = ({ children }) => {\r\n  const [theme, setTheme] = useState<string>('light');\r\n\r\n  const toggleTheme = () => {\r\n    setTheme((prevTheme) => (prevTheme === 'light' ? 'dark' : 'light'));\r\n  };\r\n\r\n  return (\r\n    <ThemeContext.Provider value={{ theme, toggleTheme }}>\r\n      <div className={theme}>\r\n        {children}\r\n      </div>\r\n    </ThemeContext.Provider>\r\n  );\r\n};\r\n\r\n// Хук для використання контексту\r\nexport const useTheme = (): ThemeContextType => {\r\n  const context = useContext(ThemeContext);\r\n  if (!context) {\r\n    throw new Error('useTheme must be used within a ThemeProvider');\r\n  }\r\n  return context;\r\n};\r\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,aAAa,CAAEC,UAAU,CAAEC,QAAQ,KAAmB,OAAO,CAE7E;AAAA,OAAAC,GAAA,IAAAC,IAAA,yBAMA;AACA,MAAO,MAAM,CAAAC,YAAY,cAAGL,aAAa,CAA+BM,SAAS,CAAC,CAElF;AACA,MAAO,MAAM,CAAAC,aAAgD,CAAGC,IAAA,EAAkB,IAAjB,CAAEC,QAAS,CAAC,CAAAD,IAAA,CAC3E,KAAM,CAACE,KAAK,CAAEC,QAAQ,CAAC,CAAGT,QAAQ,CAAS,OAAO,CAAC,CAEnD,KAAM,CAAAU,WAAW,CAAGA,CAAA,GAAM,CACxBD,QAAQ,CAAEE,SAAS,EAAMA,SAAS,GAAK,OAAO,CAAG,MAAM,CAAG,OAAQ,CAAC,CACrE,CAAC,CAED,mBACET,IAAA,CAACC,YAAY,CAACS,QAAQ,EAACC,KAAK,CAAE,CAAEL,KAAK,CAAEE,WAAY,CAAE,CAAAH,QAAA,cACnDL,IAAA,QAAKY,SAAS,CAAEN,KAAM,CAAAD,QAAA,CACnBA,QAAQ,CACN,CAAC,CACe,CAAC,CAE5B,CAAC,CAED;AACA,MAAO,MAAM,CAAAQ,QAAQ,CAAGA,CAAA,GAAwB,CAC9C,KAAM,CAAAC,OAAO,CAAGjB,UAAU,CAACI,YAAY,CAAC,CACxC,GAAI,CAACa,OAAO,CAAE,CACZ,KAAM,IAAI,CAAAC,KAAK,CAAC,8CAA8C,CAAC,CACjE,CACA,MAAO,CAAAD,OAAO,CAChB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}