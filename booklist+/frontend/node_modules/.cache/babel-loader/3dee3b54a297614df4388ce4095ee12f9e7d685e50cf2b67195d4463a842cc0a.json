{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\lenovo\\\\portfolio_mafia\\\\booklist\\\\frontend\\\\src\\\\context\\\\ThemeContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState } from 'react';\n\n// Інтерфейс для теми\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// Створення контексту\nexport const ThemeContext = /*#__PURE__*/createContext(undefined);\n\n// Провайдер контексту\nexport const ThemeProvider = ({\n  children\n}) => {\n  _s();\n  const [theme, setTheme] = useState('light');\n  const toggleTheme = () => {\n    setTheme(prevTheme => prevTheme === 'light' ? 'dark' : 'light');\n  };\n  return /*#__PURE__*/_jsxDEV(ThemeContext.Provider, {\n    value: {\n      theme,\n      toggleTheme\n    },\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: theme,\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 5\n  }, this);\n};\n\n// Хук для використання контексту\n_s(ThemeProvider, \"c/tiXTWXTQispzpG//dV5FX41vQ=\");\n_c = ThemeProvider;\nexport const useTheme = () => {\n  _s2();\n  const context = useContext(ThemeContext);\n  if (!context) {\n    throw new Error('useTheme must be used within a ThemeProvider');\n  }\n  return context;\n};\n_s2(useTheme, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"ThemeProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","jsxDEV","_jsxDEV","ThemeContext","undefined","ThemeProvider","children","_s","theme","setTheme","toggleTheme","prevTheme","Provider","value","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","useTheme","_s2","context","Error","$RefreshReg$"],"sources":["C:/Users/User/lenovo/portfolio_mafia/booklist/frontend/src/context/ThemeContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, ReactNode } from 'react';\r\n\r\n// Інтерфейс для теми\r\ninterface ThemeContextType {\r\n  theme: string;\r\n  toggleTheme: () => void;\r\n}\r\n\r\n// Створення контексту\r\nexport const ThemeContext = createContext<ThemeContextType | undefined>(undefined);\r\n\r\n// Провайдер контексту\r\nexport const ThemeProvider: React.FC<{ children: ReactNode }> = ({ children }) => {\r\n  const [theme, setTheme] = useState<string>('light');\r\n\r\n  const toggleTheme = () => {\r\n    setTheme((prevTheme) => (prevTheme === 'light' ? 'dark' : 'light'));\r\n  };\r\n\r\n  return (\r\n    <ThemeContext.Provider value={{ theme, toggleTheme }}>\r\n      <div className={theme}>\r\n        {children}\r\n      </div>\r\n    </ThemeContext.Provider>\r\n  );\r\n};\r\n\r\n// Хук для використання контексту\r\nexport const useTheme = (): ThemeContextType => {\r\n  const context = useContext(ThemeContext);\r\n  if (!context) {\r\n    throw new Error('useTheme must be used within a ThemeProvider');\r\n  }\r\n  return context;\r\n};\r\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,QAAmB,OAAO;;AAE7E;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAMA;AACA,OAAO,MAAMC,YAAY,gBAAGL,aAAa,CAA+BM,SAAS,CAAC;;AAElF;AACA,OAAO,MAAMC,aAAgD,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAChF,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGT,QAAQ,CAAS,OAAO,CAAC;EAEnD,MAAMU,WAAW,GAAGA,CAAA,KAAM;IACxBD,QAAQ,CAAEE,SAAS,IAAMA,SAAS,KAAK,OAAO,GAAG,MAAM,GAAG,OAAQ,CAAC;EACrE,CAAC;EAED,oBACET,OAAA,CAACC,YAAY,CAACS,QAAQ;IAACC,KAAK,EAAE;MAAEL,KAAK;MAAEE;IAAY,CAAE;IAAAJ,QAAA,eACnDJ,OAAA;MAAKY,SAAS,EAAEN,KAAM;MAAAF,QAAA,EACnBA;IAAQ;MAAAS,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACN;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACe,CAAC;AAE5B,CAAC;;AAED;AAAAX,EAAA,CAhBaF,aAAgD;AAAAc,EAAA,GAAhDd,aAAgD;AAiB7D,OAAO,MAAMe,QAAQ,GAAGA,CAAA,KAAwB;EAAAC,GAAA;EAC9C,MAAMC,OAAO,GAAGvB,UAAU,CAACI,YAAY,CAAC;EACxC,IAAI,CAACmB,OAAO,EAAE;IACZ,MAAM,IAAIC,KAAK,CAAC,8CAA8C,CAAC;EACjE;EACA,OAAOD,OAAO;AAChB,CAAC;AAACD,GAAA,CANWD,QAAQ;AAAA,IAAAD,EAAA;AAAAK,YAAA,CAAAL,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}