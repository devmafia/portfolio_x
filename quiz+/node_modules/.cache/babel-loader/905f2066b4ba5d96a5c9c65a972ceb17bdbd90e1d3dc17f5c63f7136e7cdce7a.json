{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\lenovo\\\\htdocs\\\\Reactjs_practice\\\\quiz\\\\src\\\\components\\\\Quiz.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Quiz = ({\n  questions\n}) => {\n  _s();\n  const [selectedAnswers, setSelectedAnswers] = useState(Array(questions.length).fill(null));\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [correctCount, setCorrectCount] = useState(null);\n  const handleAnswerClick = isCorrect => {\n    const updatedAnswers = [...selectedAnswers];\n    updatedAnswers[currentQuestionIndex] = isCorrect;\n    setSelectedAnswers(updatedAnswers);\n    if (isCorrect) {\n      setCorrectCount(prev => prev !== null ? prev + 1 : 1);\n    }\n  };\n  const nextQuestion = () => {\n    if (currentQuestionIndex < questions.length - 1) {\n      setCurrentQuestionIndex(currentQuestionIndex + 1);\n    }\n  };\n  const calculateScore = () => {\n    setCorrectCount(selectedAnswers.filter(answer => answer === true).length);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: styles.container,\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      style: styles.questionHeader,\n      children: [\"Question \", currentQuestionIndex + 1, \" of \", questions.length]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      style: styles.questionText,\n      children: questions[currentQuestionIndex].question\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      style: styles.answerList,\n      children: questions[currentQuestionIndex].answers.map((answer, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        style: styles.answerItem,\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleAnswerClick(answer.isCorrect),\n          style: {\n            ...styles.answerButton,\n            backgroundColor: selectedAnswers[currentQuestionIndex] !== null ? answer.isCorrect ? 'green' : 'lightgrey' : 'lightgrey',\n            color: selectedAnswers[currentQuestionIndex] !== null ? '#fff' : '#000'\n          },\n          disabled: selectedAnswers[currentQuestionIndex] !== null,\n          children: answer.text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 25\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }, this), currentQuestionIndex < questions.length - 1 ? /*#__PURE__*/_jsxDEV(\"button\", {\n      style: styles.nextButton,\n      onClick: nextQuestion,\n      disabled: selectedAnswers[currentQuestionIndex] === null,\n      children: \"Next\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n      style: styles.nextButton,\n      onClick: calculateScore,\n      children: \"Show Results\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: styles.progressContainer,\n      children: questions.map((_, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          ...styles.progressCircle,\n          ...(selectedAnswers[index] === true ? styles.greenCircle : {})\n        },\n        children: selectedAnswers[index] === true ? 'âœ“' : ''\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }, this), correctCount !== null && /*#__PURE__*/_jsxDEV(\"h4\", {\n      style: styles.resultText,\n      children: [\"You got \", correctCount, \" out of \", questions.length, \" correct!\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 9\n  }, this);\n};\n_s(Quiz, \"rmrZTkaIC2ji4RgF9KrIklHqi0s=\");\n_c = Quiz;\nconst styles = {\n  container: {\n    padding: '20px',\n    width: '500px',\n    margin: '0 auto'\n  },\n  questionHeader: {\n    color: 'grey',\n    marginBottom: '10px'\n  },\n  questionText: {\n    fontWeight: 'bold',\n    marginBottom: '20px'\n  },\n  answerList: {\n    listStyleType: 'none',\n    paddingLeft: '0'\n  },\n  answerItem: {\n    marginBottom: '10px',\n    color: black\n  },\n  answerButton: {\n    width: '100%',\n    padding: '10px',\n    fontSize: '16px',\n    border: '1px solid grey',\n    borderRadius: '5px',\n    textAlign: 'left',\n    cursor: 'pointer',\n    display: 'block'\n  },\n  nextButton: {\n    marginTop: '20px',\n    padding: '10px 20px',\n    backgroundColor: 'green',\n    color: 'white',\n    border: 'none',\n    borderRadius: '5px'\n  },\n  resultText: {\n    marginTop: '20px',\n    fontSize: '18px',\n    color: 'green'\n  },\n  progressContainer: {\n    display: 'flex',\n    justifyContent: 'center',\n    marginTop: '20px'\n  },\n  progressCircle: {\n    width: '30px',\n    height: '30px',\n    borderRadius: '50%',\n    backgroundColor: 'lightgrey',\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    margin: '0 5px',\n    fontSize: '18px',\n    color: 'white',\n    fontWeight: 'bold',\n    border: '2px solid transparent'\n  },\n  greenCircle: {\n    backgroundColor: 'green',\n    color: 'white'\n  }\n};\nexport default Quiz;\nvar _c;\n$RefreshReg$(_c, \"Quiz\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Quiz","questions","_s","selectedAnswers","setSelectedAnswers","Array","length","fill","currentQuestionIndex","setCurrentQuestionIndex","correctCount","setCorrectCount","handleAnswerClick","isCorrect","updatedAnswers","prev","nextQuestion","calculateScore","filter","answer","style","styles","container","children","questionHeader","fileName","_jsxFileName","lineNumber","columnNumber","questionText","question","answerList","answers","map","index","answerItem","onClick","answerButton","backgroundColor","color","disabled","text","nextButton","progressContainer","_","progressCircle","greenCircle","resultText","_c","padding","width","margin","marginBottom","fontWeight","listStyleType","paddingLeft","black","fontSize","border","borderRadius","textAlign","cursor","display","marginTop","justifyContent","height","alignItems","$RefreshReg$"],"sources":["C:/Users/User/lenovo/htdocs/Reactjs_practice/quiz/src/components/Quiz.tsx"],"sourcesContent":["import React, { useState } from 'react';\r\n\r\ninterface Answer {\r\n    text: string;\r\n    isCorrect: boolean;\r\n}\r\n\r\ninterface Question {\r\n    question: string;\r\n    answers: Answer[];\r\n}\r\n\r\ninterface QuizProps {\r\n    questions: Question[];\r\n}\r\n\r\nconst Quiz: React.FC<QuizProps> = ({ questions }) => {\r\n    const [selectedAnswers, setSelectedAnswers] = useState<(boolean | null)[]>(Array(questions.length).fill(null));\r\n    const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\r\n    const [correctCount, setCorrectCount] = useState<number | null>(null);\r\n\r\n    const handleAnswerClick = (isCorrect: boolean) => {\r\n        const updatedAnswers = [...selectedAnswers];\r\n        updatedAnswers[currentQuestionIndex] = isCorrect;\r\n        setSelectedAnswers(updatedAnswers);\r\n\r\n        if (isCorrect) {\r\n            setCorrectCount((prev) => (prev !== null ? prev + 1 : 1));\r\n        }\r\n    };\r\n\r\n    const nextQuestion = () => {\r\n        if (currentQuestionIndex < questions.length - 1) {\r\n            setCurrentQuestionIndex(currentQuestionIndex + 1);\r\n        }\r\n    };\r\n\r\n    const calculateScore = () => {\r\n        setCorrectCount(selectedAnswers.filter((answer) => answer === true).length);\r\n    };\r\n\r\n    return (\r\n        <div style={styles.container}>\r\n            <h2 style={styles.questionHeader}>\r\n                Question {currentQuestionIndex + 1} of {questions.length}\r\n            </h2>\r\n            <h3 style={styles.questionText}>{questions[currentQuestionIndex].question}</h3>\r\n            <ul style={styles.answerList}>\r\n                {questions[currentQuestionIndex].answers.map((answer, index) => (\r\n                    <li key={index} style={styles.answerItem}>\r\n                        <button\r\n                            onClick={() => handleAnswerClick(answer.isCorrect)}\r\n                            style={{\r\n                                ...styles.answerButton,\r\n                                backgroundColor:\r\n                                    selectedAnswers[currentQuestionIndex] !== null\r\n                                        ? answer.isCorrect\r\n                                            ? 'green'\r\n                                            : 'lightgrey'\r\n                                        : 'lightgrey',\r\n                                color: selectedAnswers[currentQuestionIndex] !== null ? '#fff' : '#000',\r\n                            }}\r\n                            disabled={selectedAnswers[currentQuestionIndex] !== null}\r\n                        >\r\n                            {answer.text}\r\n                        </button>\r\n                    </li>\r\n                ))}\r\n            </ul>\r\n            {currentQuestionIndex < questions.length - 1 ? (\r\n                <button style={styles.nextButton} onClick={nextQuestion} disabled={selectedAnswers[currentQuestionIndex] === null}>\r\n                    Next\r\n                </button>\r\n            ) : (\r\n                <button style={styles.nextButton} onClick={calculateScore}>\r\n                    Show Results\r\n                </button>\r\n            )}\r\n\r\n            <div style={styles.progressContainer}>\r\n                {questions.map((_, index) => (\r\n                    <div\r\n                        key={index}\r\n                        style={{\r\n                            ...styles.progressCircle,\r\n                            ...(selectedAnswers[index] === true ? styles.greenCircle : {}),\r\n                        }}\r\n                    >\r\n                        {selectedAnswers[index] === true ? 'âœ“' : ''}\r\n                    </div>\r\n                ))}\r\n            </div>\r\n\r\n            {correctCount !== null && (\r\n                <h4 style={styles.resultText}>\r\n                    You got {correctCount} out of {questions.length} correct!\r\n                </h4>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nconst styles = {\r\n    container: {\r\n        padding: '20px',\r\n        width: '500px',\r\n        margin: '0 auto',\r\n    },\r\n    questionHeader: {\r\n        color: 'grey',\r\n        marginBottom: '10px',\r\n    },\r\n    questionText: {\r\n        fontWeight: 'bold',\r\n        marginBottom: '20px',\r\n    },\r\n    answerList: {\r\n        listStyleType: 'none',\r\n        paddingLeft: '0',\r\n    },\r\n    answerItem: {\r\n        marginBottom: '10px',\r\n        color: black,\r\n    },\r\n    answerButton: {\r\n        width: '100%',\r\n        padding: '10px',\r\n        fontSize: '16px',\r\n        border: '1px solid grey',\r\n        borderRadius: '5px',\r\n        textAlign: 'left' as const,\r\n        cursor: 'pointer',\r\n        display: 'block',\r\n    },\r\n    nextButton: {\r\n        marginTop: '20px',\r\n        padding: '10px 20px',\r\n        backgroundColor: 'green',\r\n        color: 'white',\r\n        border: 'none',\r\n        borderRadius: '5px',\r\n    },\r\n    resultText: {\r\n        marginTop: '20px',\r\n        fontSize: '18px',\r\n        color: 'green',\r\n    },\r\n    progressContainer: {\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        marginTop: '20px',\r\n    },\r\n    progressCircle: {\r\n        width: '30px',\r\n        height: '30px',\r\n        borderRadius: '50%',\r\n        backgroundColor: 'lightgrey',\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        margin: '0 5px',\r\n        fontSize: '18px',\r\n        color: 'white', \r\n        fontWeight: 'bold',\r\n        border: '2px solid transparent',\r\n    },\r\n    greenCircle: {\r\n        backgroundColor: 'green',\r\n        color: 'white',\r\n    }\r\n};\r\n\r\nexport default Quiz;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}